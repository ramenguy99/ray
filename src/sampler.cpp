u32 CMaxMinDist[17][32] = {
    {
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x80000000,
    },
    {
        0xc0000000, 0x80000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0xa0000000, 0x40000000, 0x80000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0xc0000000, 0x50000000, 0x20000000, 0x30000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x88000000, 0x58000000, 0x20000000, 0x40000000, 0x80000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0xe0000000, 0x60000000, 0x28000000, 0x10000000, 0x18000000, 0x04000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x82000000, 0x44000000, 0x2c000000, 0x10000000, 0x20000000, 0x40000000,
        0x80000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x70000000, 0x30000000, 0x14000000, 0x08000000, 0x0c000000,
        0x02000000, 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0xc0000000, 0x41000000, 0x22000000, 0x16000000, 0x08000000, 0x10000000,
        0x20000000, 0x40800000, 0x80000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x40000000, 0x20000000, 0x18000000, 0x08000000, 0x1c000000,
        0x1e000000, 0x03000000, 0x00800000, 0x00400000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x60400000, 0x20800000, 0x11000000, 0x0b000000, 0x04000000,
        0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x00200000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x40000000, 0x20000000, 0x1c000000, 0x0c000000, 0x05000000,
        0x02000000, 0x03000000, 0x00800000, 0x00400000, 0x00200000, 0x00100000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x40000000, 0x30200000, 0x10400000, 0x08800000, 0x05800000,
        0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x00100000,
        0x00080000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x40000000, 0x20000000, 0x10000000, 0x0e000000, 0x06000000,
        0x02800000, 0x01000000, 0x01800000, 0x00400000, 0x00200000, 0x00100000,
        0x00080000, 0x00040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x40000000, 0x20000000, 0x18100000, 0x08200000, 0x04400000,
        0x02c00000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
        0x00080000, 0x00040000, 0x00020000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
    {
        0x80000000, 0x40000000, 0x20000000, 0x10000000, 0x08000000, 0x07000000,
        0x03000000, 0x01400000, 0x00800000, 0x00c00000, 0x00200000, 0x00100000,
        0x00080000, 0x00040000, 0x00020000, 0x00010000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000,
    },
};

#define OneMinusEpsilon 0.99999994f

inline int Log2Int(u32 v) {
    
#ifdef COMPILER_MSVC
    unsigned long lz = 0;
    if (_BitScanReverse(&lz, v)) return lz;
    return 0;
#else
    return 31 - __builtin_clz(v);
#endif
    
}

inline u32 
MultiplyGenerator(u32 *C, u32 a) 
{
    u32 v = 0;
    
    for (int i = 0; a != 0; ++i, a >>= 1)
    {
        if (a & 1)
            v ^= C[i];
    }
    
    return v;
}

inline float 
SampleGeneratorMatrix(u32 *C, u32 a, u32 scramble = 0) 
{
    return MIN((MultiplyGenerator(C, a) ^ scramble) * 2.3283064365386963e-10f, OneMinusEpsilon);
}

// Fill a preallocated vec2 array of samples with samplePerPixel 
// well distributed positions between (0,0) and (1,1)
internal void 
GetSamplePositions(vec2* samples, u32 samplesPerPixel)
{
    u32 index = Log2Int(samplesPerPixel);
    Assert(index < ArrayCount(CMaxMinDist));
    u32* CPixel = CMaxMinDist[index];
    
    f32 invSPP = 1.0f / samplesPerPixel;
    for (u32 i = 0; i < samplesPerPixel; ++i)
        samples[i] = vec2(i * invSPP,  SampleGeneratorMatrix(CPixel, i));
}
